+---------------------+
|       ユーザー       |
|     (ブラウザ)      |
+---------------------+
           |
           | 1. アプリ起動
           |    ユーザーがURLにアクセス
           v
+---------------------+
|   フロントエンド    |
|  (Angular/Ionic)    |
+---------------------+
           |
           | 2. 初期化時にAPIリクエストを送信
           |    - `ngOnInit()` メソッド内で呼び出し
           |    - `HttpClient` を使用してGETリクエスト
           |    - URL: `/api/employees`
           v
+---------------------+
|    バックエンド      |
|    (Spring Boot)    |
+---------------------+
           |
           | 3. リクエストを受信
           |    - `EmployeeController` が呼び出される
           |    - メソッド: `getEmployees()`
           v
+---------------------+
|  EmployeeMapper     |
|  (MyBatis)          |
+---------------------+
           |
           | 4. データベースクエリを実行
           |    - `findAllEmployees()` メソッドを呼び出し
           |    - SQL: `SELECT * FROM employee`
           v
+---------------------+
|     データベース     |
|      (MySQL)        |
+---------------------+
           |
           | 5. データを取得
           |    - SQLクエリを実行し、結果を取得
           |    - データをフロントエンドに返すための準備
           v
+---------------------+
|    バックエンド      |
|    (Spring Boot)    |
+---------------------+
           |
           | 6. データをJSON形式でフロントエンドに返す
           |    - レスポンスとしてデータを返す
           v
+---------------------+
|   フロントエンド    |
|  (Angular/Ionic)    |
+---------------------+
           |
           | 7. 受け取ったデータを処理
           |    - `subscribe` メソッドでデータを受信
           |    - `employees` 配列にデータを格納
           v
+---------------------+
|     UI更新          |
|  (Angular/Ionic)    |
+---------------------+
           |
           | 8. データを表示
           |    - テンプレートにデータをバインド
           |    - 各従業員の情報をリスト形式で表示
           v
+---------------------+
|       ユーザー       |
|     (ブラウザ)      |
+---------------------+
